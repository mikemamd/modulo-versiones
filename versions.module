<?php
/**
 * @file Modulo Versiones
 * @author Miguel Martínez <miguel01amd@gmail.com>
 * @package Modules | Repo
 * @info Módulo para el detalle de versión de vehículo
 * @vertion dev 1.0.0.0
 */

/**
 * Define las nuevas páginas
 * Implements hook_menu().
 * @return array
 */
function versions_menu(){
  $items = array();
  $items['versiones/%/%'] = array(
    'title'            => t(''),
    'description'      => t('page for show version of vehicle'),
    'page callback'    => 'versions_page_empty',
    'access arguments' => array('view versions'),
  );
  return $items;
}

/*
 * Define los permisos para los usuarios
 * Implements hook_permission().
 */
function versions_permission() {
  $perm = array(
    'administer versions' => array(
      'title'       => t('administer versions module'),
      'description' => t('configure administer versions module'),
    ),
    'create versions' => array(
      'title'       => t('Create custom versions'),
      'description' => t('Permit create custom versions by user'),
    ),
    'view versions' => array(
      'title'       => t('view versions'),
      'description' => t('Permit viewer block versions'),
    ),
  );
  return $perm;
}

/**
 * @info Define las empty page de las secciones
 * @return (string)
*/
function versions_page_empty() {
  return '';
}

/*
 * Implements hook_block_info().
 */
function versions_block_info() {
  $blocks = array();
  $blocks['versions_filtro'] = array(
    'info'       => t('Filtro para versiones de vehiculos'),
    'weight'     => -12,
    'status'     => TRUE,
    'region'     => 'content',
    'cache'      => DRUPAL_NO_CACHE,
    'visibility' => BLOCK_VISIBILITY_LISTED,
    'pages'      => 'versiones/*'
  );
  $blocks['versions_content'] = array(
    'info'       => t('Contenidos para las versiones de vehiculos'),
    'weight'     => -11,
    'status'     => TRUE,
    'region'     => 'content',
    'cache'      => DRUPAL_NO_CACHE,
    'visibility' => BLOCK_VISIBILITY_LISTED,
    'pages'      => 'versiones/*'
  );
  $blocks['versions_motor'] = array(
    'info'       => t('Contenido para sección MOTOR de versiones de vehiculos'),
    'weight'     => -10,
    'status'     => TRUE,
    'region'     => 'content',
    'cache'      => DRUPAL_NO_CACHE,
    'visibility' => BLOCK_VISIBILITY_LISTED,
    'pages'      => 'versiones/*'
  );

  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function versions_block_view($delta) {
  $block = [];
  $path  = current_path();
  $url   = versions_get_url($path);

  switch ($delta) {
    case 'versions_filtro':
      if(user_access('view versions')){
        $block['content'] = versions_get_filtro($url);
      }else{
        $block['content'] = t('Not access view content');
      }//endif
    break;
    case 'versions_content':
      if(user_access('view versions')){
        $block['content'] = versions_get_content('DETALLES', $url);
      }else{
        $block['content'] = t('Not access view content');
      }//endif
    break;
    case 'versions_motor':
      if(user_access('view versions')){
        $block['content'] = versions_get_content('MOTOR', $url);
      }else{
        $block['content'] = t('Not access view content');
      }//endif
    break;
  }
  return $block;
}

/**
 * Implements hook_theme().
 */
function versions_theme() {
  $theme = array();
  $theme['versions_filtro'] = array(
    'variables' => array(
      'items' => array(),
      'class' => '',
    ),
    'template' => 'templates/filtro-version',
  );
  $theme['versions_content'] = array(
    'variables' => array(
      'items' => array(),
      'class' => '',
    ),
    'template' => 'templates/detalle-version',
  );
  $theme['versions_motor'] = array(
    'variables' => array(
      'items' => array(),
      'class' => '',
    ),
    'template' => 'templates/motor-version',
  );
  return $theme;
}

/**
 * Devuelve filtro de selección de versiones de vehículos
 * @return array
 */
function versions_get_filtro($terms) {
  global $base_url;
  $model_path = explode('/', $terms[0]['path']);
  $value   = '#';

  $content = [];
  $content['modelo'] = $base_url.'/'.$terms[0]['path'];
  $content['nombre'] = $terms[0]['name'].' '.$terms[1]['name'];
  // External Function
  $options = prueba_get_second_dropdown($terms[0]['tid']);
  foreach ($options as $key => $option) {
    if ($key > 0) {
      $alias = versions_find_alias($key);
      $url   = explode('/', $alias->alias);
      $value = $base_url.'/versiones/'.$model_path[1].'/'.$url[1];
    }

    $content['lista'][] = [
      'option' => $option,
      'value'  => $value,
    ];
  }

  return theme('versions_filtro', array('content' => $content));
}

/**
 * Devuelve el contenido de la version de vehiculo
 * @return array
 */
function versions_get_content($section, $terms) {
  $content = [];
  $taxonomy_section = taxonomy_get_term_by_name($section);

  foreach ($taxonomy_section as $term) {
    if ($term->vocabulary_machine_name == 'detalle_type') {
      $region = $term->tid;
    }
  }

  $qry = db_select('node', 'n');
  $qry->innerJoin('field_data_field_introduccion', 'fdfi', 'fdfi.entity_id = n.nid');
  $qry->innerJoin('field_data_field_vehiculo', 'fdfv', 'fdfv.entity_id = n.nid');
  $qry->innerJoin('field_data_field_region_detalle', 'fdfrd', 'fdfrd.entity_id = n.nid');
  $qry->innerJoin('field_data_field_img_st', 'fdfimg', 'fdfimg.entity_id = n.nid');
  $qry->innerJoin('field_data_field_description_st', 'fdfd', 'fdfd.entity_id = n.nid');
  $qry->condition('type', 'detalle_version', '=')
      ->condition('status', '1', '=')
      ->condition('fdfv.field_vehiculo_tid', $terms[1]['tid'], '=')
      ->condition('fdfrd.field_region_detalle_tid', $region, '=');
  $qry->fields('n', ['nid'])
      ->fields('fdfi', ['field_introduccion_value'])
      ->fields('fdfimg', ['field_img_st_fid'])
      ->fields('fdfd', ['field_description_st_value']);
  if ($section == 'MOTOR') {
    $qry->range(0,1);
  }
  $results = $qry->execute()->fetchAll();

  if (isset($results) && !empty($results)) {
    foreach ($results as $result) {
      $content[$result->nid] = [
        'etiqueta' => $result->field_introduccion_value,
        'img'      => versions_find_img($result->field_img_st_fid),
        'html'     => $result->field_description_st_value,
      ];
    }//end foreach
    switch ($section) {
      case 'DETALLES':
        return theme('versions_content', array('content' => $content));
      break;
      case 'MOTOR':
        $ficha = versions_get_ficha($terms[0]['tid']);
        return theme('versions_motor', array('content' => $content, 'ficha' => $ficha));
      break;
    }
  }//end if
}


/**
 * Devuelve ficha técnica del modelo de automóvil
 * @param $tid
 * @return string
 */
function versions_get_ficha($tid) {
  $ficha = '';
  $qry = db_select('node', 'n');
  $qry->innerJoin('field_data_field_vehiculo', 'fv', 'fv.entity_id = n.nid');
  $qry->leftJoin('field_data_field_ficha_tecnica', 'fft', 'fft.entity_id = n.nid');
  $qry->condition('type', 'descargables', '=')
      ->condition('status', '1', '=')
      ->condition('fv.field_vehiculo_tid', $tid, '=');
  $qry->fields('n', ['nid', 'title'])
      ->fields('fft', ['field_ficha_tecnica_fid']);

  $results = $qry->execute()->fetchAll();

  if (!empty($results)) {
    $ficha = versions_find_img($results[0]->field_ficha_tecnica_fid);
  }

  return $ficha;
}


/**
 * Devuelve alias de la url solicitada
 * @return array
 */
function versions_find_alias($uri) {
  $source = 'taxonomy/term/'.$uri;
  $qry = db_select('url_alias', 'ua');
  $qry->condition('ua.source', $source, '=');
  $qry->fields('ua', ['alias']);
  $results = $qry->execute()->fetchAll();
  if (isset($results) && !empty($results)) {
    foreach ($results as $result) {
      $alias = $result->alias;
    }
    return $result;
  }
}

/**
 * Devuelve id, path y nombre de la taxonomia
 * @return array
 */
function versions_get_url($path) {
  $url = explode('/', $path);
  $alias = [
    'vehiculo' => 'modelo/'.$url[1],
    'version'  => 'modelo/'.$url[2],
  ];

  foreach ($alias as $uri) {

    $qry = db_select('url_alias', 'ua');
    $qry->condition('ua.alias', $uri, '=');
    $qry->fields('ua', ['source', 'alias']);
    $result = $qry->execute()->fetchAll();


    if (!empty($result)) {
      foreach ($result as $term_id) {
        $source  = explode('/', $term_id->source);
        $ids[]   = [
          'id'    => $source[2],
          'alias' => $term_id->alias,
        ];
      }
    }
    else {
      drupal_goto('/404');
    }
  }

  $name_vehiculo = taxonomy_term_load($ids[0]['id']);
  $tid[0] = [
    'tid'   => $name_vehiculo->tid,
    'name'  => $name_vehiculo->name,
    'path'  => $ids[0]['alias'],
    'ficha' => 'ficha',
  ];

  $qry = db_select('taxonomy_term_data', 'ttd');
  $qry->innerJoin('taxonomy_term_hierarchy', 'tth', 'tth.tid = ttd.tid');
  $qry->condition('tth.parent', $tid[0]['tid'], '=');
  $qry->condition('ttd.tid', $ids[1]['id'], '=');
  $qry->fields('ttd', ['tid', 'name']);
  $results = $qry->execute()->fetchAll();

  if (isset($results) && !empty($results)) {
    foreach ($results as $result) {
      $tid[1] = [
        'tid'  => $result->tid,
        'name' => $result->name,
        'path' => $ids[1]['alias'],
      ];
    }
    return $tid;
  }
  else {
   drupal_goto('/404');
  }
}

/**
 * @info get url file by id file
 * @param (int) $fid
 * @return (string)
 */
function versions_find_img($fid){
  if (isset($fid) && !empty($fid)) {
    $file = file_load($fid);
    $imguri = file_create_url($file->uri);
  }
  else {
    $imguri = FALSE;
  }
  return $imguri;
}
